This is the screen output that will be generated when running the example:
Note: Text between [ ] are comments about what is being generated in the example.
C:\UEC> python.exe .\CEUEXPING.py     
[The python programs were saved in the C:\UEC directory where there will be:
CEUEXPING.py
ulianovellicripto.py
ulianovramdompi.py
KEYS (Directory containing the public and private keys used in the example) 
]


Ulianov Elliptical Encryption Model Example Program.
Choose ID (1=TOP+;2=TOP;3=PRIME+;4=PRIME;5=VIP+;6=VIP;7=POP): 7

[Here, 7 types and IDs can be chosen for standardizing the use of keys.
In the final version, the user will be able to create their keys based 
on the chosen ID and two strong passwords (text with 100 to 500 characters) 
and an optional time tag.
The ID will need to be chosen on a centralized server to avoid repetition
and then a certificate must be issued that links the ID to a unique user 
name (real or fictitious) and the public keys of this ID, which will 
guarantee the set: User_Name => User_ID => User_Public_Keys 
Issuing the certificate will have a cost that for the POP type ID should be in 
the range of 1 to 10 dollars only but will increase in value as the number 
of digits of the keys increases:
 1- TOP+   = 7000 Digtis = 28Kbits  (only 999 IDs available in this category)
    Example of ID:TOP+ 333-333            
 2- TOP    = 6000 Digtis = 24Kbits  ( 9K IDs available in this category)
    Example of ID:TOP 1.234-456         
 3- PRIME+ = 5000 Digtis = 25Kbits  ( 999K IDs available in this category 
    Example of ID:PRIME+ 345.678-901     
 4- PRIME  = 4000 Digtis = 20Kbits  ( 9M IDs available in this category 
    Example of ID:PRIME 7.777.777   
 5- VIP+   = 3500 Digtis = 14Kbits  ( 99M IDs available in this category 
    Example of ID:VIP+ 89.012.345-678
 6- VIP    = 3000 Digtis = 12Kbits  ( 999M IDs available in this category 
    Example of ID:VIP 123.456.789-012
 7- POP    = 2500 Digtis = 1OKbits  ( 999G IDs available in this category 
    Example of ID:POP 123.456.789.012-345 
 ]
complete_id=POP 123.456.789.012-345 [was typed  7 and enter key as the test option]
ID=POP 123.456.789.012-345, = Number of digits=2500,(encryption of 10000 bits)
Cryptographic parameters loaded:
CriptoParams(num_digits=2500,ini_head_num=110,pos_head_num=410, ini_head_str=420, pos_head_str=960,ini_data=981, pos_data=2490, len_data_dig3=1509, len_data_str=503)
Show summary of Public and Private Keys? (y/n): Y
[ Only 660 digits of each key are being shown, to see everything change 
  the line 183 in the program CEUEXPING.py, from:
       if 0 and opstr.lower() == "y":
  to:
       if 1 and opstr.lower() == "y":
]
DX_base     = -0.29599484495920185000
De_base     = 1.25969670310498325200
K_ID        = 0.0000273036665085809675925468108700435331228216184637718168
Kpub(K1_pub)= 1.5567076388385274592307916855025560414367374851615577878441
Kpub(K2_pub)= -2.495361808506756367865826678877674622067839639913150096369
Kpub(K3_pub)= -0.223203295017149660866061744189738139619452026684244205071
Kpriv(alpha)= 1.2476809042533781839329133394388373110339198199565750481848
Kpriv(de)   = -5.589885687653103598267266916080591076870811492615055110982
Kpriv(x)    = 5.5898856876531035982672669160805910768708114926150551109827
Kpriv(y)    = 3.3428199756133981329646472283385337879781562282524157520871

Testing Keys (Only the owner of the keys can do this):
Keys successfully loaded and verified

Case 1 (encrypt with public key) or 2 (encrypt with private key)? 1
[it was chosen to run case 1:
Encrypt with public key => Decrypt with private key
This is used to store private user data either by encrypting data or text up to 500 characters or a one-time password seed (up to 500 bytes or 500 hexadecimal digits or 1500 decimal digits). The UEC model uses pi keys which are sequences of 4 3-digit numbers (999,999,999,999) that can be extended to any desired size and which generate a pseudo-random sequence of infinite length of digits between 0 and 9 and each 3 digits can be used to generate an XOR operation on the data to be encrypted which despite being a simple operation cannot be broken because the sequence does not repeat itself and is completely random.
]

Case 1: Encrypt with public key => Decrypt with private key
        Used to securely store data: only the owner of the private key can read the data.
Maximum text length that can be transmitted = 503
[The data to Encrypt  could be any ASCII text with 503 characters (POP ID data limit per encryption block, for TOP+ the limit is 2000 characters). Larger texts can be encrypted with multiple blocks but a random one-time key can also be recorded to perform an XOR operation with the data to be stored, for example a 250-digit pi key allows the generation of an infinite pseudo-random sequence with 10E250 possible combinations generating a very strong one-time password to encrypt the rest of the data. 
For digital signature applications, a CRC of data with a size of up to 500 bytes or 500 hexadecimal digits or even 1500 decimal digits can be generated and this is what will be encrypted and recovered with the signed text being transmitted in the open.
]
Original text (length=503) = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129
[For this example, we chose to encode the number pi with 503 digits because it makes it easier to check if it was decoded correctly through a simple subtraction operation, but in principle it can be any given byte or character.]

Original text in dig3 code (length=1509)  = 

[
As the UEC model only works with digits from 0 to 9, a given byte or char needs to be converted to a format called dig3 that uses a sequence of 3 digits from 000 to 999, which allows internal differentiation between byte and char types and also generates control codes, creating an invalid range that makes it easier to detect decoding errors. The drawback of using dig3 is that the size of the encrypted data is multiplied by 3 and so in a 1500-digit block only 500 byte or char data can be stored added to the 1000-digit security band used (where header data is stored). The final size for POP ID has a loss factor equal to 5: 500 bytes are encoded in 2500 bytes, but this is not critical because when encrypting large sets of data it is enough to use a unique key seed encoded in an initial block of 2.5kbytes and then do an XOR (or dig3 sum) of the data to be encrypted with the long one-time password (pseudo random and without repetitions) to be generated which allows a 1 to 1 rate in the encryption.
]


Original header number = 12345678912345678901.0
Original header string = Policarpo Yoshin Ulianov - Criciuma - Santa Catarina - BRAZIL, April - 2025
[In addition to the data to be encrypted,UEC model consider a numeric header with 300 digits and another alphanumeric header with 180 characters. This data occupies a more "superficial" position (from 200 to 1000 digts places) and the idea is create a UEC data file, that use an open header before the encrypted data block and the content of this header can be repeated within the encrypted header block:
UEC_data_file = [public text header,public numericy header,(encrypted data conting[public text header,public numericy header, data to be protected or seed to a long one key passord])]  
This scheme of placing known data inside an encrypted message is not a common practice because in traditional methods, knowing part of the data helps to break the encryption, but this is not the 
case with the UEC model because the important data is located deeper (between 1000 and 2500 decimal places for the POP ID).
Recording the public header inside the encrypted data is an additional guarantee against falsification 
and confirms that the decryption was performed correctly. 
]

Data encrypted with public key (only private key can decrypt):
Encrypted data = -1.232827210482940116983882663546626106750605205944601839763173405301697394094842993367924827058363354308849698664646750366362009963307796990818515153621960303060192923617624318085471439216976298883881346207802802965071862131842294657954562848040215149380898864152127887036253129055276854843177429224427749645804698526251586682047830068344122557261701200165086345768446961198532935992013224783945671997471400460903495223988732314600384661319275964896495038990818783910504689689716325796705901488051630803441929818761141983566958446478115994056166619171717460481499217005285447978605145020058198062837948511507739176509505475837032168098699575720645508564167983373616989372631063311109370147262519233698330254392809137079517541253060494524757163416528782914211531071430861726132672722293896065813274417989603174528702340912354577784504074390713800713545665549553348922354642192114690006430871361046625278866702103880079445649158752124650523957718096405906821784403195273379379613028856412464656551142878312000071843885273970328906287385770084118615205880156931179706414597540686810542560481398637235944073735183273790118469787890124436151012187761763134812684353285836205108559215526837705789672184531529560206937208180623148875617382991940651553830188690191311645649833380537305568349630072551381136954079222117781495949274563445899421153475725422463003462739267739802151349239092758073589366582406514004200079982579073308351147646445250362301096218610862122395762770488745556177095004696860557475267410433110747780570453761837182801627635313658088674703900588708937336303311878061598175433468393856759007716005937459035432639796000182390627167946330431938485601721273221538877182869069785084565808157374064569132001080442909208816343558050473383784576889527806427845193041431649979741939323172960296272315596827448477837135942045860395218053236111621630042322958303808556552805054690604831210918958086927921438483092636553853074402667239658240387487387955664024801567360975565654238873959270801796679399168596959305203861901649461871376369313111446479068524436926942101337444326993327064449414570903763056563452853857877958905216558517374820691331597963869842496125850193420051365066325317316241894354728772821289358431127328075621461086124715981316719286246518025189074112782593539703957220289937627545896519565744111381755003225173227209985793175624060914637854777241604334730639255360495765672746770269762588244036219539859618930127827426382481806168884622161361640973899781087921957197405468026606

Decrypting with private key:
Recovered dig3 data
Recovered data: 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129
Since the data is a string containing the value of pi, the error can be calculated:
recovered data - original data: 0.0   
[This zero result shows that the decoded data is exactly the same as what was encoded]

Header text: Policarpo Yoshin Ulianov - Criciuma - Santa Catarina - BRAZIL, April - 2025
Header number: 12345678912345678901.0
[The numeric and text headers were also recovered correctly, remembering that the numeric is always an integer but can also be a set of fixed-length numbers (with leading zeros to always have the same number of digits) that were grouped or real numbers multiplied by a constant factor (for example 10000000000 to have 10 decimal places) and transformed into integers and then recovered by dividing by the same factor. Dates can be stored using the number of seconds from a fixed reference date. ]
Case 1 (encrypt with public key) or 2 (encrypt with private key)? 2

[
Here case 2 was chosen, which is basically the same thing but in the opposite direction.
Encrypt with private key => Decrypt with public key:
This is used to generate digital signatures either by encrypting a maximum of 500 characters that has been signed, or a complex CRC (up to 500 bytes or 500 hexadecimal digits or 1500 decimal digits) of a larger text that has been signed by the user with his private key. 
]

Case 2: Encrypt with private key => Decrypt with public key
        Used to sign documents: only the owner of the private key can generate this.
Maximum text length that can be transmitted = 503
Original text (π) = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129
Encoded DIG3 text
Header number = 12345678912345678901.0
Header string = Policarpo Yoshin Ulianov - Criciuma - Santa Catarina - BRAZIL, April - 2025        
Head_NUM = 12345678912345678901.0 @ 10^-410
Num_Head_str = 080111108105099097114112111032089111115104105110032085108105097110111118032045032067114105099105117109097032045032083097110116097032067097116097114105110097032045032066082065090073076044032065112114105108032045032050048050053 @ 10^-960
Dad_Num = 510460490520490530570500540530510530560570550570510500510560 @ 10^-2490
DX_data = 0.0000000000000000000000000000000000000000000000000000000000

Encrypted data with private key: -4.263736182535853423282594253505370478374812869917345326352661980065061406917659897154823361606913225492640476409363980074269395101354740947885441761895159512511474019785647893300144064126293279388354461683034837564785931212465955050484663244088616722530412768729108417988515532015336327483147345563934929767959939249919248551376287892608721482444759762737694955068497428536137787131943691953732796726785415064883324592312886640972825392666100014195221203824283531477891981706072853623044791156975928565423328010410299899339399804135001109456453209732216001643253074966737847082084695880713204867277615471922138715143380221576167328133895174140306025192434186043759493425801088532860793095588140878121615739804934532347163757797436632910608347062772049022803538414749309938965946448508621036092401328773078370267887184419977076107070578241297664470805710590454453512757707854686386444698130273955752104701755486208637663961296688791645164014700538653213312573345927896429921312405887283709783208270790722400124742144185002920877979119390193493444142000156765473209556079153315989102995898618031967537022650922412358457142098080594562012477156067989805880897173269349517769409225763754961278490093606000281650725269291705547125193789750066987084456183942769432200650153960511005379229614524816435982734319581818997230803232447138022830225016371287909338933674445310381295358706631040410642495301026245318592693968817528214325844825061708862727798796677343679278115151378909718056062736975290867631443144620713763989289545125995688475220841320275737945741379848166377790207859811347072455366390059389609722758806286916968325664580488005687610184883065783598452217164626285488828478096972324601153795834788803907040311796060819976647251538211439365729930089929273222262634592933986911889769221232059152333245207326089130477904932157263102905700520521627301286402864830761117114454173837651770664664584972384797586504524501460121876613893891311406534617664868164534706409303027113369019732258569567353135741596514729964936848595321477558176495126122286073093978465045831782462477175722458020669179740459670559679885377640744628822193972751772367841614530728842417626903898875833385401860942982688634410406497143514123469249290875113980881834505274244389980541173978177073701599253991980172515850725322746955614954753916335311883056951136854144918454022910442003538604315114492630002088691773386982303032781898747836778141430898179282998665177608541354211943995708962199656550240242042857137321571819843699

Decrypting with public key...
Recovered DIG3 data
Recovered text: 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129
Error = recovered - original = 0.0
Recovered header string: Policarpo Yoshin Ulianov - Criciuma - Santa Catarina - BRAZIL, April - 2025
Recovered header number: 12345678912345678901.0
Case 1 (encrypt with public key) or 2 (encrypt with private key)? 0
Invalid option. [input 0 end de proram prodram loop]

